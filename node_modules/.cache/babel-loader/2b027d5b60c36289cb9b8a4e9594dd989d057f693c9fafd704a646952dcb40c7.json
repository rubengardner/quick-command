{"ast":null,"code":"import{useState,useEffect}from'react';const useGetCommands=()=>{const[commands,setCommands]=useState([]);useEffect(()=>{// @ts-ignore\nchrome.storage.sync.get(['commands']).then(result=>{setCommands(result.commands||[]);}).catch(err=>{console.error('Error fetching commands:',err);});},[]);return commands;};export default useGetCommands;","map":{"version":3,"names":["useState","useEffect","useGetCommands","commands","setCommands","chrome","storage","sync","get","then","result","catch","err","console","error"],"sources":["/Users/ruben_gardner/personalProject/quick-command-3/src/dataAccess/useGetCommands.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {Command} from \"../commands/commandTypes\";\n\nconst useGetCommands = () => {\n  const [commands, setCommands] = useState<Command[]>([]);\n\n  useEffect(() => {\n    // @ts-ignore\n    chrome.storage.sync.get(['commands']).then((result) => {\n      setCommands(result.commands || []);\n    }).catch((err: any) => {\n      console.error('Error fetching commands:', err);\n    });\n  }, []);\n\n  return commands;\n};\n\nexport default useGetCommands;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAG3C,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGJ,QAAQ,CAAY,EAAE,CAAC,CAEvDC,SAAS,CAAC,IAAM,CACd;AACAI,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,EAAK,CACrDN,WAAW,CAACM,MAAM,CAACP,QAAQ,EAAI,EAAE,CAAC,CACpC,CAAC,CAAC,CAACQ,KAAK,CAAEC,GAAQ,EAAK,CACrBC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAEF,GAAG,CAAC,CAChD,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAT,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}